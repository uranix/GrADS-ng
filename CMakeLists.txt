cmake_minimum_required(VERSION 3.10)

project(GrADS VERSION 2.2.3 HOMEPAGE_URL jennifer.m.adams@nasa.gov LANGUAGES C)

set(CMAKE_C_STANDARD 11)

set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

include(CheckIncludeFile)
include(CheckLibraryExists)
include(CheckFunctionExists)
include(CheckSymbolExists)
include(CheckTypeSize)

option(USEGADAP "GrADS specific library for accessing station data" OFF)
option(USEDAP "Use DAP" OFF)
option(USEGUI "Enable GUI" ON)
option(USEREADLINE "Use readline" ON)
option(USEGEOTIFF "GeoTIFF support" ON)
option(USESHP "Use shapefile" ON)
option(USEGD "Use GD" ON)
option(USECAIRO "Enable Cairo output" ON)
option(USEGRIB2 "GRIB2 support" ON)
#option(USEHDF "HDF support" ON)
option(USEHDF5 "HDF5 support" ON)
option(USENETCDF "NetCDF support" ON)

if(CMAKE_C_BYTE_ORDER STREQUAL "BIG_ENDIAN")
    set(BYTEORDER 1)
elseif(CMAKE_C_BYTE_ORDER STREQUAL "LITTLE_ENDIAN")
    set(BYTEORDER 0)
else()
    set(BYTEORDER 0)
    message(WARNING "Endianness could not be determined.")
endif()

check_type_size("int" SIZEOF_INT)

check_include_file("malloc.h" HAVE_MALLOC_H)

if(USECAIRO)
    find_package(Cairo)
    find_package(Freetype)
    if(NOT CAIRO_FOUND OR NOT FREETYPE_FOUND)
        set(USECAIRO OFF)
    endif()
endif()

if(USEGD)
    find_package(GD)
    if(NOT GD_FOUND)
        set(USEGD OFF)
    endif()
endif()

if(USEREADLINE)
    find_package(Readline)
    if(READLINE_FOUND)
        list(APPEND grads_LIBS Readline::Readline)
    else()
        set(USEREADLINE OFF)
    endif()
endif()

if(USEGUI)
    find_package(SX)
    find_package(X11)
    if(SX_FOUND AND X11_FOUND)
        list(APPEND grads_LIBS SX::SX)
    else()
        set(USEGUI OFF)
    endif()
endif()

if(USEGEOTIFF)
    find_package(GeoTIFF)
    find_package(TIFF)
    if(GEOTIFF_FOUND AND TIFF_FOUND)
        list(APPEND grads_LIBS GEOTIFF::GEOTIFF TIFF::TIFF)
    else()
        set(USEGEOTIFF OFF)
    endif()
endif()

if(USESHP)
    find_package(SHAPELIB)
    if(SHAPELIB_FOUND)
        list(APPEND grads_LIBS SHAPELIB::SHAPELIB)
    else()
        set(USESHP OFF)
    endif()
endif()

if(USEGRIB2)
    find_package(Grib2C)
    if(Grib2C_FOUND)
        list(APPEND grads_LIBS Grib2C::Grib2C)
    else()
        set(USEGRIB2 OFF)
    endif()
endif()

#if(USEHDF)
#    find_package(HDF4)
#    if(HDF4_FOUND)
#        list(APPEND grads_LIBS HDF4::MFHDF)
#    else()
#        set(USEHDF OFF)
#    endif()
#endif()

if(USEHDF5)
    find_package(HDF5)
    if(HDF5_FOUND)
        list(APPEND grads_LIBS HDF5::HDF5)
    else()
        set(USEHDF5 OFF)
    endif()
endif()

if(USENETCDF)
    find_package(NetCDF)
    if(NetCDF_FOUND)
        list(APPEND grads_LIBS NetCDF::NetCDF)
        if(${NetCDF_VERSION} VERSION_GREATER_EQUAL "4.0.0")
            set(USENETCDF4 ON)
        else()
            set(USENETCDF4 OFF)
        endif()
    else()
        set(USENETCDF OFF)
    endif()
endif()

if(USENETCDF OR USEHDF)
    find_package(Udunits)
    if(Udunits_FOUND)
        list(APPEND grads_LIBS Udunits::udunits)
    else()
        set(USENETCDF OFF)
        set(USEHDF OFF)
    endif()
endif()

check_function_exists("fseeko" HAVE_FSEEKO)
check_function_exists("SimpleGetFile" HAVE_SIMPLEGETFILE)

check_library_exists("m" "sqrt" "" HAVE_LIBM)
if(HAVE_LIBM)
    list(APPEND grads_LIBS m)
endif()

add_subdirectory(src)
